"""
Script t·ª± ƒë·ªông t·ªï ch·ª©c l·∫°i c·∫•u tr√∫c project
D·ªçn d·∫πp root directory, di chuy·ªÉn files v√†o th∆∞ m·ª•c ph√π h·ª£p
"""

import os
import shutil
from datetime import datetime

class ProjectOrganizer:
    def __init__(self):
        self.root = os.getcwd()
        self.moves = []
        self.deletes = []
        self.created_dirs = []
        
    def create_directory(self, path):
        """T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i"""
        if not os.path.exists(path):
            os.makedirs(path, exist_ok=True)
            self.created_dirs.append(path)
            print(f"‚úÖ T·∫°o th∆∞ m·ª•c: {path}")
    
    def move_file(self, source, destination):
        """Di chuy·ªÉn file"""
        if os.path.exists(source):
            # T·∫°o th∆∞ m·ª•c ƒë√≠ch n·∫øu ch∆∞a c√≥
            dest_dir = os.path.dirname(destination)
            self.create_directory(dest_dir)
            
            # Di chuy·ªÉn file
            shutil.move(source, destination)
            self.moves.append((source, destination))
            print(f"üì¶ Di chuy·ªÉn: {source} ‚Üí {destination}")
        else:
            print(f"‚ö†Ô∏è File kh√¥ng t·ªìn t·∫°i: {source}")
    
    def delete_file(self, filepath):
        """X√≥a file"""
        if os.path.exists(filepath):
            os.remove(filepath)
            self.deletes.append(filepath)
            print(f"üóëÔ∏è X√≥a: {filepath}")
        else:
            print(f"‚ö†Ô∏è File kh√¥ng t·ªìn t·∫°i: {filepath}")
    
    def organize(self):
        """T·ªï ch·ª©c l·∫°i to√†n b·ªô project"""
        print("="*60)
        print("üßπ B·∫ÆT ƒê·∫¶U T·ªî CH·ª®C L·∫†I PROJECT")
        print("="*60)
        print()
        
        # 1. T·∫°o c√°c th∆∞ m·ª•c m·ªõi
        print("üìÅ B∆Ø·ªöC 1: T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c m·ªõi")
        print("-"*60)
        self.create_directory("scripts/runners")
        self.create_directory("scripts/automation")
        self.create_directory("scripts/windows")
        self.create_directory("scripts/backtest")
        self.create_directory("scripts/analysis")
        self.create_directory("scripts/utils")
        print()
        
        # 2. Di chuy·ªÉn runner scripts
        print("üì¶ B∆Ø·ªöC 2: Di chuy·ªÉn runner scripts")
        print("-"*60)
        runners = [
            "run_bot.py",
            "run_ict_bot.py",
            "run_ict_bot_smc.py",
            "run_backtest.py",
            "run_simple_backtest.py",
            "run_tests.py"
        ]
        for runner in runners:
            self.move_file(runner, f"scripts/runners/{runner}")
        print()
        
        # 3. Di chuy·ªÉn automation scripts
        print("ü§ñ B∆Ø·ªöC 3: Di chuy·ªÉn automation scripts")
        print("-"*60)
        automation = [
            "watchdog.py",
            "health_check.py",
            "rotate_logs.py"
        ]
        for script in automation:
            self.move_file(script, f"scripts/automation/{script}")
        print()
        
        # 4. Di chuy·ªÉn batch files
        print("üñ•Ô∏è B∆Ø·ªöC 4: Di chuy·ªÉn batch files")
        print("-"*60)
        batch_files = [
            "start_bot.bat",
            "auto_restart_bot.bat"
        ]
        for bat in batch_files:
            self.move_file(bat, f"scripts/windows/{bat}")
        print()
        
        # 5. Di chuy·ªÉn documentation
        print("üìù B∆Ø·ªöC 5: Di chuy·ªÉn documentation")
        print("-"*60)
        docs = [
            "PROJECT_EVALUATION.md",
            "TECHNOLOGY_STACK.md"
        ]
        for doc in docs:
            self.move_file(doc, f"docs/{doc}")
        print()
        
        # 6. Di chuy·ªÉn utility scripts
        print("üîß B∆Ø·ªöC 6: Di chuy·ªÉn utility scripts")
        print("-"*60)
        # Gi·ªØ reorganize_project.py ·ªü root ƒë·ªÉ c√≥ th·ªÉ ch·∫°y l·∫°i
        # self.move_file("reorganize_project.py", "scripts/utils/reorganize_project.py")
        print("‚ÑπÔ∏è Gi·ªØ organize_project.py ·ªü root")
        print()
        
        # 6.1. Di chuy·ªÉn backtest scripts
        print("üìä B∆Ø·ªöC 6.1: Di chuy·ªÉn backtest scripts")
        print("-"*60)
        backtest_scripts = [
            "scripts/backtest_all_symbols.py",
            "scripts/backtest_all_symbols_smc.py",
            "scripts/backtest_all_symbols_supertrend.py",
            "scripts/backtest_ict_smc.py"
        ]
        for script in backtest_scripts:
            filename = os.path.basename(script)
            self.move_file(script, f"scripts/backtest/{filename}")
        print()
        
        # 6.2. Di chuy·ªÉn analysis scripts
        print("üìà B∆Ø·ªöC 6.2: Di chuy·ªÉn analysis scripts")
        print("-"*60)
        analysis_scripts = [
            "scripts/analyze_ict_log.py",
            "scripts/benchmark_performance.py",
            "scripts/plot_balance_chart.py",
            "scripts/plot_balance_from_log.py"
        ]
        for script in analysis_scripts:
            filename = os.path.basename(script)
            self.move_file(script, f"scripts/analysis/{filename}")
        print()
        
        # 6.3. Di chuy·ªÉn utility scripts trong scripts/
        print("üîß B∆Ø·ªöC 6.3: Di chuy·ªÉn utility scripts")
        print("-"*60)
        util_scripts = [
            "scripts/check_data_range.py",
            "scripts/check_symbols.py",
            "scripts/clear_report.py",
            "scripts/test_historical_data.py",
            "scripts/test_smc_library.py",
            "scripts/test_timeframes.py"
        ]
        for script in util_scripts:
            filename = os.path.basename(script)
            self.move_file(script, f"scripts/utils/{filename}")
        print()
        
        # 7. X√≥a log files c≈©
        print("üóëÔ∏è B∆Ø·ªöC 7: X√≥a log files c≈©")
        print("-"*60)
        old_logs = [
            "ict_bot.log",
            "ict_bot_smc.log",
            "supertrend_bot.log"
        ]
        for log in old_logs:
            self.delete_file(log)
        print()
        
        # 8. T·∫°o file README cho t·ª´ng th∆∞ m·ª•c
        print("üìÑ B∆Ø·ªöC 8: T·∫°o README cho t·ª´ng th∆∞ m·ª•c")
        print("-"*60)
        self.create_readme_files()
        print()
        
        # 9. T·∫°o file __init__.py
        print("üêç B∆Ø·ªöC 9: T·∫°o __init__.py files")
        print("-"*60)
        self.create_init_files()
        print()
        
        # 10. T·ªïng k·∫øt
        print("="*60)
        print("‚úÖ HO√ÄN TH√ÄNH T·ªî CH·ª®C L·∫†I PROJECT")
        print("="*60)
        print(f"üìÅ Th∆∞ m·ª•c ƒë√£ t·∫°o: {len(self.created_dirs)}")
        print(f"üì¶ Files ƒë√£ di chuy·ªÉn: {len(self.moves)}")
        print(f"üóëÔ∏è Files ƒë√£ x√≥a: {len(self.deletes)}")
        print()
        
        # In summary
        self.print_summary()
    
    def create_readme_files(self):
        """T·∫°o README cho c√°c th∆∞ m·ª•c"""
        readmes = {
            "scripts/runners/README.md": """# üöÄ Runner Scripts

Scripts ƒë·ªÉ ch·∫°y c√°c bot v√† backtest.

## Files

- **run_bot.py** - Ch·∫°y SuperTrend Bot
- **run_ict_bot.py** - Ch·∫°y ICT Bot
- **run_ict_bot_smc.py** - Ch·∫°y ICT Bot SMC
- **run_backtest.py** - Ch·∫°y backtest
- **run_simple_backtest.py** - Ch·∫°y backtest ƒë∆°n gi·∫£n
- **run_tests.py** - Ch·∫°y unit tests

## Usage

```bash
# Ch·∫°y bot
python scripts/runners/run_bot.py --account demo --symbol EURUSD

# Ch·∫°y backtest
python scripts/runners/run_backtest.py --symbol BTCUSD --start 2024-01-01
```
""",
            "scripts/automation/README.md": """# ü§ñ Automation Scripts

Scripts t·ª± ƒë·ªông h√≥a monitoring v√† maintenance.

## Files

- **watchdog.py** - Monitor v√† auto-restart bot
- **health_check.py** - Ki·ªÉm tra health c·ªßa bot v√† MT5
- **rotate_logs.py** - Qu·∫£n l√Ω v√† n√©n log files

## Usage

```bash
# Watchdog
python scripts/automation/watchdog.py

# Health check
python scripts/automation/health_check.py --alerts

# Log rotation
python scripts/automation/rotate_logs.py --clean-reports
```

## Task Scheduler

ƒê·∫∑t l·ªãch ch·∫°y:
- health_check.py - M·ªói gi·ªù
- rotate_logs.py - M·ªói ng√†y 3 AM
""",
            "scripts/windows/README.md": """# üñ•Ô∏è Windows Scripts

Batch scripts cho Windows automation.

## Files

- **start_bot.bat** - Auto-restart bot script
- **auto_restart_bot.bat** - Alternative restart script

## Usage

```batch
REM Ch·∫°y bot v·ªõi auto-restart
start_bot.bat

REM Ho·∫∑c double-click file trong Explorer
```

## Task Scheduler Setup

1. M·ªü Task Scheduler
2. Create Task
3. Trigger: At startup
4. Action: Start a program ‚Üí `start_bot.bat`
5. Settings: Run whether user logged on or not
""",
            "scripts/backtest/README.md": """# üìä Backtest Scripts

Scripts ƒë·ªÉ ch·∫°y backtest cho c√°c chi·∫øn l∆∞·ª£c kh√°c nhau.

## Files

- **backtest_all_symbols.py** - Backtest t·∫•t c·∫£ symbols
- **backtest_all_symbols_smc.py** - Backtest SMC strategy
- **backtest_all_symbols_supertrend.py** - Backtest SuperTrend strategy
- **backtest_ict_smc.py** - Backtest ICT SMC strategy

## Usage

```bash
# Backtest all symbols
python scripts/backtest/backtest_all_symbols.py

# Backtest specific strategy
python scripts/backtest/backtest_ict_smc.py --symbol BTCUSD --start 2024-01-01
```

## Output

Results saved to `reports/` folder:
- CSV files v·ªõi trade history
- JSON files v·ªõi summary statistics
- Equity curves
""",
            "scripts/analysis/README.md": """# üìà Analysis Scripts

Scripts ƒë·ªÉ ph√¢n t√≠ch performance v√† visualize k·∫øt qu·∫£.

## Files

- **analyze_ict_log.py** - Ph√¢n t√≠ch ICT bot logs
- **benchmark_performance.py** - So s√°nh performance
- **plot_balance_chart.py** - V·∫Ω bi·ªÉu ƒë·ªì balance
- **plot_balance_from_log.py** - V·∫Ω bi·ªÉu ƒë·ªì t·ª´ log files

## Usage

```bash
# Analyze logs
python scripts/analysis/analyze_ict_log.py

# Plot balance
python scripts/analysis/plot_balance_chart.py

# Benchmark
python scripts/analysis/benchmark_performance.py
```

## Output

- PNG/HTML charts
- Performance statistics
- Comparative analysis
""",
            "scripts/utils/README.md": """# üîß Utility Scripts

Scripts ti·ªán √≠ch cho testing v√† maintenance.

## Files

- **check_data_range.py** - Ki·ªÉm tra data availability
- **check_symbols.py** - Ki·ªÉm tra symbols tr√™n MT5
- **clear_report.py** - X√≥a old reports
- **test_historical_data.py** - Test historical data
- **test_smc_library.py** - Test SMC library
- **test_timeframes.py** - Test timeframes

## Usage

```bash
# Check symbols
python scripts/utils/check_symbols.py

# Check data range
python scripts/utils/check_data_range.py --symbol BTCUSD

# Clear reports
python scripts/utils/clear_report.py
```
"""
        }
        
        for path, content in readmes.items():
            if not os.path.exists(path):
                with open(path, 'w', encoding='utf-8') as f:
                    f.write(content)
                print(f"‚úÖ T·∫°o: {path}")
    
    def create_init_files(self):
        """T·∫°o __init__.py cho Python packages"""
        init_files = [
            "scripts/__init__.py",
            "scripts/runners/__init__.py",
            "scripts/automation/__init__.py",
            "scripts/backtest/__init__.py",
            "scripts/analysis/__init__.py",
            "scripts/utils/__init__.py"
        ]
        
        for init_file in init_files:
            if not os.path.exists(init_file):
                with open(init_file, 'w', encoding='utf-8') as f:
                    f.write('"""Python package marker"""\n')
                print(f"‚úÖ T·∫°o: {init_file}")
    
    def print_summary(self):
        """In t·ªïng k·∫øt chi ti·∫øt"""
        print("üìä CHI TI·∫æT THAY ƒê·ªîI")
        print("="*60)
        
        if self.moves:
            print("\nüì¶ Files ƒë√£ di chuy·ªÉn:")
            for source, dest in self.moves:
                print(f"  ‚Ä¢ {source} ‚Üí {dest}")
        
        if self.deletes:
            print("\nüóëÔ∏è Files ƒë√£ x√≥a:")
            for file in self.deletes:
                print(f"  ‚Ä¢ {file}")
        
        if self.created_dirs:
            print("\nüìÅ Th∆∞ m·ª•c ƒë√£ t·∫°o:")
            for dir in self.created_dirs:
                print(f"  ‚Ä¢ {dir}")
        
        print("\n" + "="*60)
        print("üìÇ C·∫§U TR√öC M·ªöI:")
        print("="*60)
        print("""
Root/
‚îú‚îÄ‚îÄ README.md                 ‚úÖ Gi·ªØ nguy√™n
‚îú‚îÄ‚îÄ LICENSE                   ‚úÖ Gi·ªØ nguy√™n
‚îú‚îÄ‚îÄ requirements.txt          ‚úÖ Gi·ªØ nguy√™n
‚îú‚îÄ‚îÄ setup.py                  ‚úÖ Gi·ªØ nguy√™n
‚îú‚îÄ‚îÄ config.json               ‚úÖ Gi·ªØ nguy√™n
‚îÇ
‚îú‚îÄ‚îÄ scripts/
‚îÇ   ‚îú‚îÄ‚îÄ runners/              üì¶ Runner scripts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ run_bot.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ run_ict_bot.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ run_ict_bot_smc.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ run_backtest.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ run_simple_backtest.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ run_tests.py
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ automation/           ü§ñ Automation scripts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ watchdog.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ health_check.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ rotate_logs.py
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ windows/              üñ•Ô∏è Windows batch scripts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ start_bot.bat
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ auto_restart_bot.bat
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ backtest/             üìä Backtest scripts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ backtest_all_symbols.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ backtest_all_symbols_smc.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ backtest_all_symbols_supertrend.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ backtest_ict_smc.py
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ analysis/             üìà Analysis & visualization
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ analyze_ict_log.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ benchmark_performance.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ plot_balance_chart.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ plot_balance_from_log.py
‚îÇ   ‚îÇ
‚îÇ   ‚îî‚îÄ‚îÄ utils/                üîß Utility scripts
‚îÇ       ‚îú‚îÄ‚îÄ check_data_range.py
‚îÇ       ‚îú‚îÄ‚îÄ check_symbols.py
‚îÇ       ‚îú‚îÄ‚îÄ clear_report.py
‚îÇ       ‚îú‚îÄ‚îÄ test_historical_data.py
‚îÇ       ‚îú‚îÄ‚îÄ test_smc_library.py
‚îÇ       ‚îî‚îÄ‚îÄ test_timeframes.py
‚îÇ
‚îú‚îÄ‚îÄ docs/                     üìù Documentation
‚îÇ   ‚îú‚îÄ‚îÄ PROJECT_EVALUATION.md
‚îÇ   ‚îî‚îÄ‚îÄ TECHNOLOGY_STACK.md
‚îÇ
‚îú‚îÄ‚îÄ core/                     ‚úÖ Kh√¥ng ƒë·ªïi
‚îú‚îÄ‚îÄ engines/                  ‚úÖ Kh√¥ng ƒë·ªïi
‚îú‚îÄ‚îÄ tests/                    ‚úÖ Kh√¥ng ƒë·ªïi
‚îú‚îÄ‚îÄ utils/                    ‚úÖ Kh√¥ng ƒë·ªïi
‚îî‚îÄ‚îÄ logs/                     ‚úÖ Kh√¥ng ƒë·ªïi
        """)
        
        print("="*60)
        print("üìù L∆ØU √ù QUAN TR·ªåNG")
        print("="*60)
        print("""
‚ö†Ô∏è Sau khi t·ªï ch·ª©c l·∫°i, b·∫°n c·∫ßn:

1. C·∫≠p nh·∫≠t c√°c import paths trong code n·∫øu c·∫ßn
2. C·∫≠p nh·∫≠t scripts/batch files v·ªõi paths m·ªõi
3. C·∫≠p nh·∫≠t Task Scheduler v·ªõi paths m·ªõi
4. C·∫≠p nh·∫≠t documentation v·ªõi paths m·ªõi

‚úÖ Paths m·ªõi ƒë·ªÉ ch·∫°y:

   # Ch·∫°y bot
   python scripts/runners/run_bot.py

   # Watchdog
   python scripts/automation/watchdog.py

   # Health check
   python scripts/automation/health_check.py

   # Log rotation
   python scripts/automation/rotate_logs.py

üîÑ N·∫øu mu·ªën ho√†n t√°c:
   Gi·ªØ nguy√™n file reorganize_project.py n√†y, c√≥ th·ªÉ t·∫°o script
   restore ƒë·ªÉ ho√†n t√°c c√°c thay ƒë·ªïi.
        """)
        print("="*60)


def main():
    """Entry point"""
    print("\n" + "="*60)
    print("üßπ T·ªî CH·ª®C L·∫†I PROJECT STRUCTURE")
    print("="*60)
    print("\nScript n√†y s·∫Ω di chuy·ªÉn files ƒë·ªÉ root directory g·ªçn g√†ng h∆°n.")
    print("\n‚ö†Ô∏è C·∫¢NH B√ÅO: Script n√†y s·∫Ω di chuy·ªÉn v√† x√≥a files!")
    print("ƒê·∫£m b·∫£o b·∫°n ƒë√£ commit code ho·∫∑c backup tr∆∞·ªõc khi ch·∫°y.")
    print()
    
    # Confirm
    confirm = input("B·∫°n c√≥ ch·∫Øc mu·ªën ti·∫øp t·ª•c? (yes/no): ").strip().lower()
    
    if confirm not in ['yes', 'y']:
        print("‚ùå ƒê√£ h·ªßy b·ªè.")
        return
    
    print()
    
    # Run organization
    organizer = ProjectOrganizer()
    organizer.organize()
    
    print("\n‚úÖ Ho√†n t·∫•t! Project ƒë√£ ƒë∆∞·ª£c t·ªï ch·ª©c l·∫°i.")
    print("üìù Ki·ªÉm tra l·∫°i c·∫•u tr√∫c m·ªõi v√† c·∫≠p nh·∫≠t paths n·∫øu c·∫ßn.\n")


if __name__ == "__main__":
    main()
